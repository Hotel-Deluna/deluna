<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >

<mapper namespace="com.hotel.company.dto.HotelMapper">

    <resultMap id="selectHotelInfoMap" type="com.hotel.company.vo.HotelInfoVo$HotelDetailInfo">
        <result column="hotel_num" property="hotel_num"/>
        <result column="business_user_num" property="business_user_num"/>
        <result column="phone_num" property="phone_num"/>
        <result column="address" property="address"/>
        <result column="latitude" property="latitude"/>
        <result column="longitude" property="longitude"/>
        <result column="name" property="name"/>
        <result column="eng_name" property="eng_name"/>
        <result column="hotel_info" property="info"/>
        <result column="hotel_rule" property="rule"/>
        <result column="hotel_star" property="star"/>
        <result column="holiday_price_status" property="holiday_price_status"/>
        <result column="region_code" property="region_1depth_name"/>
        <result column="region_address" property="region_2depth_name"/>
<!--        <result column="is_delete" property="is_delete"/>-->
<!--        <result column="dt_insert" property="dt_insert"/>-->
<!--        <result column="dt_update" property="dt_update"/>-->
<!--        <result column="insert_user" property="insert_user"/>-->
<!--        <result column="update_user" property="update_user"/>-->
    </resultMap>

    <resultMap id="selectPeakSeasonListMap" type="com.hotel.company.vo.HotelInfoVo$PeakSeason">
        <result column="peak_num" property="peak_num"/>
        <result column="hotel_num" property="hotel_num"/>
        <result column="peak_season_std" property="peak_season_start"/>
        <result column="peak_season_end" property="peak_season_end"/>
    </resultMap>

    <resultMap id="selectRoomDetailInfoMap" type="com.hotel.company.vo.HotelInfoVo$RoomDetailInfo">
        <result column="room_detail_num" property="room_detail_num"/>
        <result column="room_num" property="room_num"/>
        <result column="room_detail_name" property="name"/>
        <result column="room_detail_status" property="status"/>
        <result column="room_closed_start" property="room_closed_start"/>
        <result column="room_closed_end" property="room_closed_end"/>
        <result column="delete_date" property="delete_date"/>
        <result column="reservation_status" property="reservation_status"/>
        <result column="st_date" property="st_date"/>
        <result column="ed_date" property="ed_date"/>
    </resultMap>

    <resultMap id="selectRoomInfoListMap" type="com.hotel.company.vo.HotelInfoVo$RoomInfo">
        <result column="room_num" property="room_num"/>
        <result column="hotel_num" property="hotel_num"/>
        <result column="minimum_people" property="minimum_people"/>
        <result column="maximum_people" property="maximum_people"/>
        <result column="name" property="name"/>
        <result column="double_bed_count" property="double_bed_count"/>
        <result column="single_bed_count" property="single_bed_count"/>
        <result column="check_in" property="check_in_time"/>
        <result column="check_out" property="check_out_time"/>
        <result column="weekday_price" property="weekday_price"/>
        <result column="weekend_price" property="weekend_price"/>
        <result column="p_weekend_price" property="p_weekend_price"/>
        <result column="delete_date" property="delete_date"/>
        <result column="holiday_price_status" property="holiday_price_status"/>
    </resultMap>

    <resultMap id="selectRoomDetailByDetailNumMap" type="com.hotel.company.vo.HotelInfoVo$RoomDetailInfo">
        <result column="room_detail_num" property="room_detail_num"/>
        <result column="room_num" property="room_num"/>
        <result column="room_detail_name" property="name"/>
        <result column="name" property="room_name"/>
        <result column="room_detail_status" property="status"/>
        <result column="room_closed_start" property="room_closed_start"/>
        <result column="room_closed_end" property="room_closed_end"/>
        <result column="delete_date" property="delete_date"/>
    </resultMap>

    <!--        <result column="is_delete" property="is_delete"/>-->
    <!--        <result column="dt_insert" property="dt_insert"/>-->
    <!--        <result column="dt_update" property="dt_update"/>-->
    <!--        <result column="insert_user" property="insert_user"/>-->
    <!--        <result column="update_user" property="update_user"/>-->

    <!-- 호텔 등록 -->
    <insert id="insertHotelInfo">
        INSERT INTO d_hotel (business_user_num, phone_num, address, latitude, longitude, name, eng_name, hotel_info, hotel_rule, hotel_star,
                             holiday_price_status, region_code, region_address, is_delete, dt_insert, dt_update, insert_user, update_user)
            VALUE (#{business_user_num}, #{phone_num}, #{address}, #{latitude}, #{longitude}, #{name}, #{eng_name}, #{info}, #{rule},
                   #{star}, #{holiday_price_status}, #{region_1depth_name}, #{region_2depth_name},
                   'N', NOW(), NOW(), #{insert_user}, #{update_user})
    </insert>

    <!-- 호텔 등록시 중복조회 -->
    <select id="checkDuplicationHotel" resultType="int">
        SELECT hotel_num
        FROM d_hotel
        WHERE latitude =

              #{latitude} AND longitude = #{longitude}
        LIMIT 1
    </select>

    <!-- 호텔 태그 등록 -->
    <insert id="insertHotelTags">
        INSERT INTO d_hotel_reference_tag (hotel_num, hotel_tag_num, dt_insert, dt_update, insert_user, update_user)
            VALUE (#{pk_num}, #{tag_num}, NOW(), NOW(), #{insert_user}, #{update_user})
    </insert>

    <!-- 호텔 정보 수정 -->
    <update id="updateHotelInfo">
        UPDATE d_hotel
        SET phone_num = #{phone_num},
          address = #{address},
          name = #{name},
          eng_name = #{eng_name},
          hotel_info = #{info},
          hotel_rule = #{rule},
          hotel_star = #{star},
          region_code = #{region_1depth_name},
          region_address = #{region_2depth_name},
          latitude = #{latitude},
          longitude = #{longitude},
          dt_update = NOW(),
          update_user = #{update_user}
        WHERE hotel_num = #{hotel_num}
    </update>

    <!-- 이미지 삭제 -->
    <delete id="deleteImage">
        DELETE
        FROM d_image
        WHERE select_type = #{select_type} AND primary_key = #{primary_key}
    </delete>

    <!-- 호텔 태그 삭제 -->
    <delete id="deleteHotelTags">
        DELETE
        FROM d_hotel_reference_tag
        WHERE hotel_num = #{hotel_num}
    </delete>

    <!-- 호텔 태그 조회 -->
    <select id="selectHotelTags" resultType="int">
        SELECT hotel_tag_num
        FROM d_hotel_reference_tag
        WHERE hotel_num = #{hotel_num}
    </select>

    <!-- 호텔 정보 조회 -->
    <select id="selectHotelInfo" resultMap="selectHotelInfoMap">
        SELECT *
        FROM d_hotel
        WHERE hotel_num = #{hotel_num}
          AND is_delete = 'N'
    </select>

    <!-- 호텔 삭제 -->
    <update id="deleteHotel">
        UPDATE d_hotel
        SET is_delete = 'Y',
            dt_update = NOW()
        WHERE hotel_num = #{hotel_num}
    </update>

    <!-- 호텔 삭제 테이블에 사유 저장 -->
    <insert id="insertHotelDeleteReason">
        INSERT INTO d_hotel_delete(hotel_num, content, dt_insert, insert_user)
        VALUE(#{hotel_num}, #{reason}, NOW(), #{insert_user})
    </insert>

    <!-- 해당 호실 예약중인 것 전부 취소 처리 -->
    <update id="deleteHotelCancelReservation">
        UPDATE d_reservation
        SET reservation_status = 3
        WHERE room_detail_num IN
        <foreach collection="list" item="room_detail_num" index="index" separator="," open="(" close=")">
         #{room_detail_num}
        </foreach>
          AND reservation_status = 1
    </update>

    <!-- 사업자 소유 호텔 번호 조회 -->
    <select id="selectOwnerHotelList" resultType="int">
        SELECT hotel_num FROM d_hotel WHERE business_user_num = #{business_user_num}
    </select>

    <!-- -->
    <select id="selectOwnerHotelNameList" resultType="com.hotel.company.vo.HotelInfoVo$OwnerHotelName">
        SELECT name, hotel_num FROM d_hotel WHERE business_user_num = #{business_user_num}
    </select>

    <!-- 호텔 예약리스트 조회 -->
    <select id="selectHotelReservationList" resultType="com.hotel.company.vo.HotelInfoVo$HotelReservationDetailInfo">
        SELECT
            re.reservation_num,
            re.reservation_name AS customer_name,
            re.reservation_phone AS customer_phone_num,
            re.reservation_status,
            re.st_date,
            re.ed_date,
            re.dt_insert,
            r.name AS room_name,
            h.name AS hotel_name
        FROM d_reservation re
                 LEFT JOIN d_room_detail rd ON rd.room_detail_num = re.room_detail_num
                 LEFT JOIN d_room r ON rd.room_num = r.room_num
                 LEFT JOIN d_hotel h on r.hotel_num = h.hotel_num
        WHERE re.room_detail_num IN
        <foreach collection="room_detail_num_list" item="room_detail_num" index="index" separator="," open="(" close=")">
             #{room_detail_num}
        </foreach>
        <choose>
            <when test="reservation_date !=null">
                AND date_format(#{reservation_date}, '%Y-%m-%d') BETWEEN date_format(re.st_date,'%Y-%m-%d') AND date_format(re.ed_date, '%Y-%m-%d')
            </when>

            <when test="customer_name !=null">
                AND re.reservation_name = #{customer_name}
            </when>

            <when test="customer_phone_num !=null">
                AND re.reservation_phone = #{customer_phone_num}
            </when>

            <when test="reservation_num !=null">
                AND reservation_num = #{reservation_num}
            </when>
        </choose>
        <choose>
            <when test="rank_num == 2">
                AND re.reservation_status = 1
            </when>

            <when test="rank_num == 3">
                AND (re.reservation_status = 2 OR  re.reservation_status = 3)
            </when>

            <when test="rank_num == 4">
                AND re.reservation_status = 4
            </when>
        </choose>
        ORDER BY re.reservation_num DESC
    </select>
    <!-- 호텔 예약리스트 전체 개수 조회 -->
    <select id="selectHotelReservationListCount" resultType="int">
        SELECT count(*)
        FROM d_reservation re
        LEFT JOIN d_room_detail rd ON rd.room_detail_num = re.room_detail_num
        LEFT JOIN d_room r ON rd.room_num = r.room_num
        LEFT JOIN d_hotel h on r.hotel_num = h.hotel_num
        WHERE re.room_detail_num IN
        <foreach collection="room_detail_num_list" item="room_detail_num" index="index" separator="," open="(" close=")">
            #{room_detail_num}
        </foreach>
        <choose>
            <when test="reservation_date !=null">
                AND date_format(#{reservation_date}, '%Y-%m-%d') BETWEEN date_format(re.st_date,'%Y-%m-%d') AND date_format(re.ed_date, '%Y-%m-%d')
            </when>

            <when test="customer_name !=null">
                AND re.reservation_name = #{customer_name}
            </when>

            <when test="customer_phone_num !=null">
                AND re.reservation_phone = #{customer_phone_num}
            </when>

            <when test="reservation_num !=null">
                AND reservation_num = #{reservation_num}
            </when>
        </choose>
        <choose>
            <when test="rank_num == 2">
                AND re.reservation_status = 1
            </when>

            <when test="rank_num == 3">
                AND (re.reservation_status = 2 OR  re.reservation_status = 3)
            </when>

            <when test="rank_num == 4">
                AND re.reservation_status = 4
            </when>
        </choose>
    </select>

    <!-- 이미지 등록 -->
    <insert id="insertImage">
        INSERT INTO d_image (select_type, primary_key, picture_name, bucket_url, picture_sequence, dt_insert, dt_update, insert_user, update_user)
            VALUE (#{select_type}, #{primary_key}, #{picture_name}, #{bucket_url}, #{picture_sequence}, NOW(), NOW(), #{insert_user}, #{update_user})
    </insert>

    <!-- 이미지 조회 - 호텔 or 객실 -->
    <select id="selectImageList" resultType="string">
        SELECT bucket_url
        FROM d_image
        WHERE select_type = #{select_type}
          AND primary_key = #{primary_key}
        ORDER BY picture_sequence
    </select>

    <!-- 성수기 등록 -->
    <insert id="insertPeakSeason">
        INSERT INTO d_peak_season (hotel_num, peak_season_std, peak_season_end, is_delete, dt_insert, dt_update, insert_user, update_user)
        VALUE (#{hotel_num}, #{peak_season_std}, #{peak_season_end}, 'N', NOW(), NOW(), #{insert_user}, #{update_user})
    </insert>

    <!-- 성수기 소프트 삭제 -->
    <update id="softDeletePeakSeason">
        UPDATE d_peak_season
        SET is_delete = 'Y'
        WHERE hotel_num = #{hotel_num}
    </update>

    <!-- 성수기 정보 조회 -->
    <select id="selectPeakSeasonList" resultMap="selectPeakSeasonListMap">
        SELECT *
        FROM d_peak_season
        WHERE hotel_num = #{hotel_num}
          AND is_delete = 'N'
    </select>

    <!-- 객실 등록 -->
    <insert id="insertRoomInfo">
        INSERT INTO d_room (hotel_num, minimum_people, maximum_people, name, double_bed_count, single_bed_count,
                            check_in, check_out, weekday_price, weekend_price, p_weekday_price, p_weekend_price, is_delete, dt_insert, dt_update, insert_user, update_user)
            VALUE (#{hotel_num}, #{minimum_people}, #{maximum_people}, #{name}, #{double_bed_count}, #{single_bed_count},
                   #{check_in_time}, #{check_out_time}, #{weekday_price}, #{weekend_price}, #{p_weekday_price}, #{p_weekend_price}, 'N', NOW(), NOW(), #{insert_user}, #{update_user})
    </insert>

    <!-- 객실 태그 등록 -->
    <insert id="insertRoomTags">
        INSERT INTO d_room_reference_tag (room_num, room_tag_num, dt_insert, dt_update, insert_user, update_user)
            VALUE (#{pk_num}, #{tag_num}, NOW(), NOW(), #{insert_user}, #{update_user})
    </insert>

    <!-- 객실 리스트 조회 - 호텔번호기준 -->
    <select id="selectRoomInfoList" resultMap="selectRoomInfoListMap">
        SELECT r.*, h.holiday_price_status
        FROM d_room r
            LEFT JOIN d_hotel h ON r.hotel_num = h.hotel_num
        WHERE r.hotel_num = #{hotel_num}
        AND r.is_delete = 'N'
    </select>

    <!-- 객실 조회 - 객실번호기준 -->
    <select id="selectRoomInfo" resultMap="selectRoomInfoListMap">
        SELECT r.*, h.holiday_price_status
        FROM d_room r
            LEFT JOIN d_hotel h ON r.hotel_num = h.hotel_num
        WHERE r.room_num = #{room_num}
        AND r.is_delete = 'N'
    </select>

    <!-- 객실 태그 조회 -->
    <select id="selectRoomTags" resultType="int">
        SELECT room_tag_num
        FROM d_room_reference_tag
        WHERE room_num = #{room_num}
    </select>

    <!-- 객실 삭제일 지정 -->
    <update id="updateRoomDeleteDate">
        UPDATE d_room
        SET delete_date = #{delete_date}
        WHERE room_num IN
        <foreach collection="pk" item="pk" index="index" separator="," open="(" close=")">
             #{pk}
        </foreach>
    </update>

    <!-- 객실 삭제 테이블 저장 -->
    <insert id="insertRoomDelete">
        INSERT INTO d_room_delete(room_num, dt_insert, insert_user)
            VALUE(#{pk}, NOW(), #{insert_user})
    </insert>

    <!-- 객실 삭제 -->
    <update id="deleteRoom">
        UPDATE d_room
        SET is_delete = 'Y',
            dt_update = NOW()
        WHERE room_num IN
        <foreach collection="list" item="room_num" index="index" separator="," open="(" close=")">
             #{room_num}
        </foreach>
    </update>

    <!-- 객실 태그 삭제 -->
    <delete id="deleteRoomTags">
        DELETE
        FROM d_room_reference_tag
        WHERE room_num = #{room_num}
    </delete>

    <!-- 객실 삭제시 해당 객실에 연결된 호실들 중 최종예약날짜 조회 -->
    <select id="selectLastReservationDate" resultType="date">
        SELECT rv.ed_date
        FROM d_room_detail rd
                 LEFT JOIN d_reservation rv ON rd.room_detail_num = rv.room_detail_num
        WHERE rd.room_detail_num  IN
        <foreach collection="list" item="room_detail_num" index="index" separator="," open="(" close=")">
                 #{room_detail_num}
        </foreach>
        AND rd.is_delete = 'N'
        AND rv.reservation_status = 1
        ORDER BY rv.reservation_num DESC limit 1
    </select>

    <!-- 객실명 중복조회 -->
    <select id="selectDuplicateRoomName" resultType="string">
        SELECT name
        FROM d_room
        WHERE name = #{name}
        AND hotel_num = #{hotel_num}
    </select>

    <!-- 객실 정보 수정 -->
    <update id="updateRoomInfo">
        UPDATE d_room
        SET name = #{name},
            minimum_people = #{minimum_people},
            maximum_people = #{maximum_people},
            double_bed_count = #{double_bed_count},
            single_bed_count = #{single_bed_count},
            check_in = #{check_in_time},
            check_out = #{check_out_time},
            p_weekday_price = #{p_weekday_price},
            p_weekend_price = #{p_weekend_price},
            weekday_price = #{weekday_price},
            weekend_price = #{weekend_price},
            dt_update = NOW(),
            update_user = #{update_user}
        WHERE room_num = #{room_num}
    </update>

    <!-- 공휴일 가격상태 업데이트 -->
    <update id="updateHolidayPriceStatus">
        UPDATE d_hotel
        SET holiday_price_status = #{holiday_price_status},
            dt_update = NOW(),
            update_user = #{update_user}
        WHERE hotel_num = #{hotel_num}
    </update>

    <!-- 호실 등록 -->
    <insert id="insertRoomDetailInfo">
        INSERT INTO d_room_detail (room_num, room_detail_name, room_detail_status, room_closed_start, room_closed_end,
                                   is_delete, dt_insert, dt_update, insert_user, update_user)
            VALUE (#{room_num}, #{name}, #{room_detail_status}, #{room_closed_start}, #{room_closed_end},
                   'N', NOW(), NOW(), #{insert_user}, #{update_user})
    </insert>

    <!-- 객실 등록시 호실 등록 -->
    <insert id="insertRoomDetailInfoForRoom">
        INSERT INTO d_room_detail (room_num, room_detail_name, room_detail_status, room_closed_start, room_closed_end,
                                   is_delete, dt_insert, dt_update, insert_user, update_user)
            VALUE (#{room_num}, #{name}, #{room_detail_status}, #{room_closed_start}, #{room_closed_end},
                   'N', NOW(), NOW(), #{insert_user}, #{update_user})
    </insert>

<!--    &lt;!&ndash; 객실번호로 호실 조회 &ndash;&gt;-->
<!--    <select id="selectRoomDetailInfo" resultMap="selectRoomDetailInfoMap">-->
<!--        SELECT A.* FROM-->
<!--            (-->
<!--                SELECT rd.*, rv.reservation_status, rv.room_detail_num AS rv_room, rv.st_date, rv.ed_date-->
<!--                FROM d_room_detail rd-->
<!--                         LEFT JOIN d_reservation rv on rd.room_detail_num = rv.room_detail_num-->
<!--                WHERE rd.room_num = #{room_num}-->
<!--                  AND rd.is_delete = 'N'-->
<!--                ORDER BY rv.reservation_num DESC LIMIT 20000-->
<!--                /*-->
<!--                My-SQL의 서브쿼리의 데이터 구조와 정렬을 변화시키기 위해 리밋값을 줌 https://jaenjoy.tistory.com/39-->
<!--                Limit을 걸어줄 경우 데이터의 순서 뿐만 아니라 데이터의 갯수까지도 제한되기 떄문에-->
<!--                테이블 내 데이터의 본절적인 내용이 변경되어서 서브쿼리의 결과 즉, group by의 대상이 되는 결과를 원하는데로 설정가능-->
<!--                */-->
<!--            ) A-->
<!--        GROUP BY rv_room-->
<!--    </select>-->

    <!-- 객실번호로 호실 조회 -->
    <select id="selectRoomDetailInfo" resultMap="selectRoomDetailInfoMap">
        SELECT *
        FROM d_room_detail
        WHERE room_num = #{room_num}
          AND is_delete = 'N'
    </select>

    <!-- 호실번호로 예약정보 조회 -->
    <select id="selectRoomDetailReservationInfo" resultType="com.hotel.company.dto.HotelDto$HotelReservationList">
        SELECT rv.*
        FROM d_reservation rv
                 LEFT JOIN d_room_detail rd on rd.room_detail_num = rv.room_detail_num
        WHERE rd.room_detail_num = #{room_detail_num}
          AND rd.is_delete = 'N'
          AND rv.reservation_status = 1 -- 예약중인 것만 조회
          AND (DATE(now()) BETWEEN rv.st_date  AND rv.ed_date) -- 오늘날짜가 예약일 사이에 있는지 조회
    </select>

    <!-- 호실번호로 호실 조회 -->
    <select id="selectRoomDetailByDetailNum" resultMap="selectRoomDetailByDetailNumMap">
        SELECT rd.*, dr.name
        FROM d_room_detail rd
                 left join d_room dr on rd.room_num = dr.room_num
        WHERE room_detail_num = #{room_detail_num}
          AND rd.is_delete = 'N'
    </select>

    <!-- 호실 이용불가 설정 -->
    <update id="updateDisableRoomDetail">
        UPDATE d_room_detail
        SET room_detail_status = 2,
            room_closed_start = #{room_closed_start},
            room_closed_end = #{room_closed_end}
        WHERE room_detail_num = #{room_detail_num}
    </update>

    <!-- 해당 호실 삭제여부와 상관없이 호텔번호로 해당 호텔의 모든 호실정보 가져옴 예약정보등 조회용. -->
    <select id="selectRoomDetailNumForAll" resultType="int">
        SELECT rd.room_detail_num
        FROM d_hotel h
                 LEFT JOIN d_room r ON h.hotel_num = r.hotel_num
                 LEFT JOIN d_room_detail rd ON r.room_num = rd.room_detail_num
        WHERE h.hotel_num = #{hotel_num}
    </select>

    <!-- 해당 호실 예약 목록 조회 -->
    <select id="selectRoomDetailReservationDate" resultType="com.hotel.company.dto.HotelDto$RoomDetailReservationDate">
        SELECT rv.st_date , rv.ed_date
        FROM d_room_detail rd
                 LEFT JOIN d_reservation rv on rd.room_detail_num = rv.room_detail_num
        WHERE rd.room_detail_num = #{room_detail_num}
          AND rv.reservation_status = 1
    </select>

    <!-- 호실 삭제일 지정 & 예약 불가능으로 설정 -->
    <update id="updateRoomDetailDeleteDate">
        UPDATE d_room_detail
        SET delete_date = #{delete_date}
        , room_detail_status = 2
        WHERE room_detail_num IN
        <foreach collection="pk" item="pk" index="index" separator="," open="(" close=")">
            #{pk}
        </foreach>
    </update>

    <!-- 호실 삭제 -->
    <update id="deleteRoomDetail">
        UPDATE d_room_detail
        SET is_delete = 'Y',
            dt_update = NOW()
        WHERE room_detail_num IN
        <foreach collection="list" item="room_detail_num" index="index" separator="," open="(" close=")">
            #{room_detail_num}
        </foreach>
    </update>

    <!-- 호실 삭제 테이블 저장 -->
    <insert id="insertRoomDetailDelete">
        INSERT INTO d_room_detail_delete (room_detail_num, dt_insert, insert_user)
            VALUE(#{pk}, NOW(), #{insert_user})
    </insert>


    <!-- 오늘날짜 공휴일 체크 -->
<!--        <select id="selectHoliday" resultType="string">-->
<!--            SELECT holiday_name-->
<!--            FROM d_holiday_info-->
<!--            WHERE str_to_date(holiday_date, '%Y-%m-%d') = str_to_date(NOW(), '%Y-%m-%d')-->
<!--        </select>-->

<!--     오늘날짜 공휴일 체크 테스트용 -->
    <select id="selectHoliday" parameterType="date" resultType="string">
        SELECT holiday_name
        FROM d_holiday_info
        WHERE date_format(holiday_date, '%Y-%m-%d') = date_format(#{now}, '%Y-%m-%d')
    </select>
    <!-- 오늘날짜 성수기 체크 테스트용 -->
    <select id="selectTodayPeakSeason" resultType="string">
        SELECT hotel_num
        FROM d_peak_season
        WHERE date_format(peak_season_std, '%Y-%m-%d')
            BETWEEN date_format(NOW(), '%Y-%m-%d')
            AND date_format(peak_season_end, '%Y-%m-%d')
    </select>

    <!-- 검색바 - 호텔명 -->
    <select id="selectHotelSearchBarName" resultType="string">
        SELECT name
        FROM d_hotel
        WHERE name LIKE #{text}
    </select>

    <!-- 검색바 - 주소 -->
    <select id="selectHotelSearchBarAddress" resultType="string">
        SELECT address
        FROM d_hotel
        WHERE address LIKE #{text}
    </select>

    <!-- 검색바 - 지역코드 -->
    <select id="selectHotelSearchBarRegionCode" resultType="string">
        SELECT region_code
        FROM d_hotel
        WHERE region_code LIKE #{text}
    </select>

    <!-- 검색하기 - 호텔번호 리스트 -->
    <select id="selectSearchList" resultType="int">
        <bind name="text" value="'%' + _parameter.getText() + '%'" />
        SELECT hotel_num
        FROM d_hotel
        WHERE is_delete = 'N'
        <choose>
            <when test="search_type == 1">
                AND region_code LIKE #{text}
            </when>
            <when test="search_type == 2">
                AND address LIKE #{text}
            </when>
            <when test="search_type == 3">
                AND name LIKE #{text}
            </when>
        </choose>
    </select>

    <!-- 해당 호텔의 예약중인 호실 리스트 조회 -->
    <select id="selectHotelReservationListForSearch" resultType="com.hotel.company.dto.HotelDto$HotelReservationList">
        SELECT
            re.reservation_num, re.st_date, re.ed_date, re.room_detail_num
        FROM d_reservation re
                 LEFT JOIN d_room_detail rd ON rd.room_detail_num = re.room_detail_num
                 left join d_room r on rd.room_num  = r.room_num
                 left join d_hotel h on h.hotel_num = r.hotel_num
        WHERE h.hotel_num = #{hotel_num}
          AND rd.is_delete = 'N'
          AND re.reservation_status = 1 -- 예약중
        -- AND date_format(re.ed_date, '%Y-%m-%d') > date_format(now(), '%Y-%m-%d') -- 이미 예약날짜 지난데이터 제외
    </select>

    <!-- 전체 호실들중 예약중인데 요청기간이 겹쳐 예약불가능한 상태인 호실 리스트 조회 - 예약불가 판정은 reservation_reservation_status 존재하면 예약불가 -->
    <select id="selectDatePeriodCheckRoomDetailInfo" resultMap="selectRoomDetailInfoMap">
        SELECT rdd.*, A.reservation_status, A.st_date, A.ed_date
        FROM
            (
            SELECT rd.room_detail_num, rv.st_date , rv.ed_date, rv.reservation_status
            FROM d_room_detail rd
                LEFT JOIN d_reservation rv ON rd.room_detail_num = rv.room_detail_num
            WHERE rd.room_detail_num IN
            <foreach collection="room_detail_num" item="room_detail_num" index="index" separator="," open="(" close=")">
                #{room_detail_num}
            </foreach>
            <![CDATA[
            AND (DATE(#{start_dt}) < rv.ed_date AND DATE(#{end_dt}) > rv.st_date ) -- 요청 기간과 예약기간이 중복되는 데이터 조회
            AND rv.reservation_status = 1 -- 예약중인 데이터만 조회
            ]]>
            ) A
                RIGHT OUTER JOIN d_room_detail rdd ON A.room_detail_num = rdd.room_detail_num
        WHERE rdd.room_detail_num IN
        <foreach collection="room_detail_num" item="room_detail_num" index="index" separator="," open="(" close=")">
            #{room_detail_num}
        </foreach>
        AND rdd.is_delete = 'N'
        GROUP BY rdd.room_detail_num -- 중복제거
    </select>

    <!-- 호텔 예약리스트 조회 - 검색 -->
<!--    <select id="selectHotelReservationListForSearch" resultType="int">-->
<!--        SELECT-->
<!--            re.reservation_num-->
<!--        FROM d_reservation re-->
<!--        LEFT JOIN d_room_detail rd ON rd.room_detail_num = re.room_detail_num-->
<!--        left join d_room r on rd.room_detail_num = r.room_num-->
<!--        left join d_hotel h on r.hotel_num = h.hotel_num-->
<!--        WHERE h.hotel_num = #{hotel_num}-->
<!--        AND re.reservation_status != 1-->
<!--        <![CDATA[-->
<!--        and (date_format(#{reservation_start_date}, '%Y-%m-%d') > date_format(re.ed_date,'%Y-%m-%d')-->
<!--        or date_format(#{reservation_end_date}, '%Y-%m-%d') < date_format(re.st_date, '%Y-%m-%d') )-->
<!--        ]]>-->
<!--    </select>-->

<!--    &lt;!&ndash; 호텔 예약리스트 조회 - 검색 &ndash;&gt;-->
<!--    <select id="selectHotelReservationListForSearch" resultType="com.hotel.company.dto.HotelDto$HotelReservationList">-->
<!--        SELECT-->
<!--            re.reservation_num, st_date, ed_date-->
<!--        FROM d_reservation re-->
<!--                 LEFT JOIN d_room_detail rd ON rd.room_detail_num = re.room_detail_num-->
<!--                 left join d_room r on rd.room_detail_num = r.room_num-->
<!--                 left join d_hotel h on r.hotel_num = h.hotel_num-->
<!--        WHERE h.hotel_num = #{hotel_num}-->
<!--          AND re.reservation_status != 1-->
<!--    </select>-->

    <!-- 여행지 정보 -->
    <select id="selectTouristSpotList" resultType="com.hotel.company.vo.HotelSearchVo$TouristSpotInfo">
        SELECT ts.tourist_spot_num,
               ts.name as tourist_spot_name,
               ts.count as hotel_count,
               i.bucket_url as image
        FROM d_tourist_spot ts
                 LEFT JOIN d_image i ON ts.tourist_spot_num = i.primary_key AND i.select_type =3
        ORDER BY ts.tourist_spot_num
    </select>

    <!-- 지역코드기준으로 호텔 정보 조회 -->
    <select id="selectHotelByRegionCode" resultMap="selectHotelInfoMap">
        SELECT *
        FROM d_hotel
        WHERE region_code = #{region_code}
          AND is_delete = 'N'
    </select>

</mapper>